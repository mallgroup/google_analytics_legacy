// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package cz.vps4u.google_analytics_legacy;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackerBoolValue {
    private Long trackerId;
    public Long getTrackerId() { return trackerId; }
    public void setTrackerId(Long setterArg) { this.trackerId = setterArg; }

    private Boolean value;
    public Boolean getValue() { return value; }
    public void setValue(Boolean setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackerId", trackerId);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static TrackerBoolValue fromMap(Map<String, Object> map) {
      TrackerBoolValue fromMapResult = new TrackerBoolValue();
      Object trackerId = map.get("trackerId");
      fromMapResult.trackerId = (trackerId == null) ? null : ((trackerId instanceof Integer) ? (Integer)trackerId : (Long)trackerId);
      Object value = map.get("value");
      fromMapResult.value = (Boolean)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackerIntValue {
    private Long trackerId;
    public Long getTrackerId() { return trackerId; }
    public void setTrackerId(Long setterArg) { this.trackerId = setterArg; }

    private Long value;
    public Long getValue() { return value; }
    public void setValue(Long setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackerId", trackerId);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static TrackerIntValue fromMap(Map<String, Object> map) {
      TrackerIntValue fromMapResult = new TrackerIntValue();
      Object trackerId = map.get("trackerId");
      fromMapResult.trackerId = (trackerId == null) ? null : ((trackerId instanceof Integer) ? (Integer)trackerId : (Long)trackerId);
      Object value = map.get("value");
      fromMapResult.value = (value == null) ? null : ((value instanceof Integer) ? (Integer)value : (Long)value);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HitBuilderMessage {
    private Long trackerId;
    public Long getTrackerId() { return trackerId; }
    public void setTrackerId(Long setterArg) { this.trackerId = setterArg; }

    private String data;
    public String getData() { return data; }
    public void setData(String setterArg) { this.data = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackerId", trackerId);
      toMapResult.put("data", data);
      return toMapResult;
    }
    static HitBuilderMessage fromMap(Map<String, Object> map) {
      HitBuilderMessage fromMapResult = new HitBuilderMessage();
      Object trackerId = map.get("trackerId");
      fromMapResult.trackerId = (trackerId == null) ? null : ((trackerId instanceof Integer) ? (Integer)trackerId : (Long)trackerId);
      Object data = map.get("data");
      fromMapResult.data = (String)data;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StringValue {
    private String value;
    public String getValue() { return value; }
    public void setValue(String setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static StringValue fromMap(Map<String, Object> map) {
      StringValue fromMapResult = new StringValue();
      Object value = map.get("value");
      fromMapResult.value = (String)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackerStringValue {
    private Long trackerId;
    public Long getTrackerId() { return trackerId; }
    public void setTrackerId(Long setterArg) { this.trackerId = setterArg; }

    private String value;
    public String getValue() { return value; }
    public void setValue(String setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackerId", trackerId);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static TrackerStringValue fromMap(Map<String, Object> map) {
      TrackerStringValue fromMapResult = new TrackerStringValue();
      Object trackerId = map.get("trackerId");
      fromMapResult.trackerId = (trackerId == null) ? null : ((trackerId instanceof Integer) ? (Integer)trackerId : (Long)trackerId);
      Object value = map.get("value");
      fromMapResult.value = (String)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackerSetValue {
    private Long trackerId;
    public Long getTrackerId() { return trackerId; }
    public void setTrackerId(Long setterArg) { this.trackerId = setterArg; }

    private String key;
    public String getKey() { return key; }
    public void setKey(String setterArg) { this.key = setterArg; }

    private String value;
    public String getValue() { return value; }
    public void setValue(String setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackerId", trackerId);
      toMapResult.put("key", key);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static TrackerSetValue fromMap(Map<String, Object> map) {
      TrackerSetValue fromMapResult = new TrackerSetValue();
      Object trackerId = map.get("trackerId");
      fromMapResult.trackerId = (trackerId == null) ? null : ((trackerId instanceof Integer) ? (Integer)trackerId : (Long)trackerId);
      Object key = map.get("key");
      fromMapResult.key = (String)key;
      Object value = map.get("value");
      fromMapResult.value = (String)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TrackerDoubleValue {
    private Long trackerId;
    public Long getTrackerId() { return trackerId; }
    public void setTrackerId(Long setterArg) { this.trackerId = setterArg; }

    private Double value;
    public Double getValue() { return value; }
    public void setValue(Double setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackerId", trackerId);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static TrackerDoubleValue fromMap(Map<String, Object> map) {
      TrackerDoubleValue fromMapResult = new TrackerDoubleValue();
      Object trackerId = map.get("trackerId");
      fromMapResult.trackerId = (trackerId == null) ? null : ((trackerId instanceof Integer) ? (Integer)trackerId : (Long)trackerId);
      Object value = map.get("value");
      fromMapResult.value = (Double)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IntValue {
    private Long value;
    public Long getValue() { return value; }
    public void setValue(Long setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static IntValue fromMap(Map<String, Object> map) {
      IntValue fromMapResult = new IntValue();
      Object value = map.get("value");
      fromMapResult.value = (value == null) ? null : ((value instanceof Integer) ? (Integer)value : (Long)value);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TrackerApi {
    void enableExceptionReporting(TrackerBoolValue arg);
    void setSessionTimeout(TrackerIntValue arg);
    void enableAutoActivityTracking(TrackerBoolValue arg);
    void send(HitBuilderMessage arg);
    StringValue get(TrackerStringValue arg);
    void set(TrackerSetValue arg);
    void setSampleRate(TrackerDoubleValue arg);
    void setUseSecure(TrackerBoolValue arg);
    void setScreenName(TrackerStringValue arg);
    void setLocation(TrackerStringValue arg);
    void setReferrer(TrackerStringValue arg);
    void setPage(TrackerStringValue arg);
    void setHostname(TrackerStringValue arg);
    void setTitle(TrackerStringValue arg);
    void setLanguage(TrackerStringValue arg);
    void setEncoding(TrackerStringValue arg);
    void setScreenColors(TrackerStringValue arg);
    void setScreenResolution(IntValue arg);
    void setViewportSize(TrackerStringValue arg);
    void setClientId(TrackerStringValue arg);
    void setAppName(TrackerStringValue arg);
    void setAppId(TrackerStringValue arg);
    void setAppInstallerId(TrackerStringValue arg);
    void setAppVersion(TrackerStringValue arg);
    void setAnonymizeIp(TrackerBoolValue arg);
    void enableAdvertisingIdCollection(TrackerBoolValue arg);

    /** Sets up an instance of `TrackerApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TrackerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.enableExceptionReporting", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerBoolValue input = TrackerBoolValue.fromMap((Map<String, Object>)message);
              api.enableExceptionReporting(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setSessionTimeout", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerIntValue input = TrackerIntValue.fromMap((Map<String, Object>)message);
              api.setSessionTimeout(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.enableAutoActivityTracking", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerBoolValue input = TrackerBoolValue.fromMap((Map<String, Object>)message);
              api.enableAutoActivityTracking(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.send", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              HitBuilderMessage input = HitBuilderMessage.fromMap((Map<String, Object>)message);
              api.send(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.get", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              StringValue output = api.get(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.set", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerSetValue input = TrackerSetValue.fromMap((Map<String, Object>)message);
              api.set(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setSampleRate", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerDoubleValue input = TrackerDoubleValue.fromMap((Map<String, Object>)message);
              api.setSampleRate(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setUseSecure", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerBoolValue input = TrackerBoolValue.fromMap((Map<String, Object>)message);
              api.setUseSecure(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setScreenName", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setScreenName(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setLocation", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setLocation(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setReferrer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setReferrer(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setPage", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setPage(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setHostname", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setHostname(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setTitle", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setTitle(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setLanguage", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setLanguage(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setEncoding", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setEncoding(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setScreenColors", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setScreenColors(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setScreenResolution", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              api.setScreenResolution(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setViewportSize", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setViewportSize(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setClientId", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setClientId(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setAppName", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setAppName(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setAppId", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setAppId(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setAppInstallerId", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setAppInstallerId(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setAppVersion", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerStringValue input = TrackerStringValue.fromMap((Map<String, Object>)message);
              api.setAppVersion(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.setAnonymizeIp", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerBoolValue input = TrackerBoolValue.fromMap((Map<String, Object>)message);
              api.setAnonymizeIp(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TrackerApi.enableAdvertisingIdCollection", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              TrackerBoolValue input = TrackerBoolValue.fromMap((Map<String, Object>)message);
              api.enableAdvertisingIdCollection(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface GoogleAnalyticsApi {
    void getInstance();
    IntValue newTracker(StringValue arg);

    /** Sets up an instance of `GoogleAnalyticsApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, GoogleAnalyticsApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.GoogleAnalyticsApi.getInstance", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.getInstance();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.GoogleAnalyticsApi.newTracker", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StringValue input = StringValue.fromMap((Map<String, Object>)message);
              IntValue output = api.newTracker(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
