// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface GALTrackerBoolValue ()
+(GALTrackerBoolValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerIntValue ()
+(GALTrackerIntValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALHitBuilderMessage ()
+(GALHitBuilderMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerGetValue ()
+(GALTrackerGetValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerStringValue ()
+(GALTrackerStringValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerSetValue ()
+(GALTrackerSetValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerDoubleValue ()
+(GALTrackerDoubleValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerSetScreenResolutionValue ()
+(GALTrackerSetScreenResolutionValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerGetClientIdValue ()
+(GALTrackerGetClientIdValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerIdValue ()
+(GALTrackerIdValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALGABool ()
+(GALGABool*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALGAInt ()
+(GALGAInt*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackerId ()
+(GALTrackerId*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GALTrackingId ()
+(GALTrackingId*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation GALTrackerBoolValue
+(GALTrackerBoolValue*)fromMap:(NSDictionary*)dict {
  GALTrackerBoolValue* result = [[GALTrackerBoolValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerIntValue
+(GALTrackerIntValue*)fromMap:(NSDictionary*)dict {
  GALTrackerIntValue* result = [[GALTrackerIntValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALHitBuilderMessage
+(GALHitBuilderMessage*)fromMap:(NSDictionary*)dict {
  GALHitBuilderMessage* result = [[GALHitBuilderMessage alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation GALTrackerGetValue
+(GALTrackerGetValue*)fromMap:(NSDictionary*)dict {
  GALTrackerGetValue* result = [[GALTrackerGetValue alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerStringValue
+(GALTrackerStringValue*)fromMap:(NSDictionary*)dict {
  GALTrackerStringValue* result = [[GALTrackerStringValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerSetValue
+(GALTrackerSetValue*)fromMap:(NSDictionary*)dict {
  GALTrackerSetValue* result = [[GALTrackerSetValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.key = dict[@"key"];
  if ((NSNull *)result.key == [NSNull null]) {
    result.key = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.key ? self.key : [NSNull null]), @"key", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerDoubleValue
+(GALTrackerDoubleValue*)fromMap:(NSDictionary*)dict {
  GALTrackerDoubleValue* result = [[GALTrackerDoubleValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerSetScreenResolutionValue
+(GALTrackerSetScreenResolutionValue*)fromMap:(NSDictionary*)dict {
  GALTrackerSetScreenResolutionValue* result = [[GALTrackerSetScreenResolutionValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  result.value1 = dict[@"value1"];
  if ((NSNull *)result.value1 == [NSNull null]) {
    result.value1 = nil;
  }
  result.value2 = dict[@"value2"];
  if ((NSNull *)result.value2 == [NSNull null]) {
    result.value2 = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", (self.value1 ? self.value1 : [NSNull null]), @"value1", (self.value2 ? self.value2 : [NSNull null]), @"value2", nil];
}
@end

@implementation GALTrackerGetClientIdValue
+(GALTrackerGetClientIdValue*)fromMap:(NSDictionary*)dict {
  GALTrackerGetClientIdValue* result = [[GALTrackerGetClientIdValue alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerIdValue
+(GALTrackerIdValue*)fromMap:(NSDictionary*)dict {
  GALTrackerIdValue* result = [[GALTrackerIdValue alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", nil];
}
@end

@implementation GALGABool
+(GALGABool*)fromMap:(NSDictionary*)dict {
  GALGABool* result = [[GALGABool alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALGAInt
+(GALGAInt*)fromMap:(NSDictionary*)dict {
  GALGAInt* result = [[GALGAInt alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation GALTrackerId
+(GALTrackerId*)fromMap:(NSDictionary*)dict {
  GALTrackerId* result = [[GALTrackerId alloc] init];
  result.trackerId = dict[@"trackerId"];
  if ((NSNull *)result.trackerId == [NSNull null]) {
    result.trackerId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackerId ? self.trackerId : [NSNull null]), @"trackerId", nil];
}
@end

@implementation GALTrackingId
+(GALTrackingId*)fromMap:(NSDictionary*)dict {
  GALTrackingId* result = [[GALTrackingId alloc] init];
  result.trackingId = dict[@"trackingId"];
  if ((NSNull *)result.trackingId == [NSNull null]) {
    result.trackingId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.trackingId ? self.trackingId : [NSNull null]), @"trackingId", nil];
}
@end

void GALTrackerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<GALTrackerApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.enableExceptionReporting"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerBoolValue *input = [GALTrackerBoolValue fromMap:message];
        FlutterError *error;
        [api enableExceptionReporting:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setSessionTimeout"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerIntValue *input = [GALTrackerIntValue fromMap:message];
        FlutterError *error;
        [api setSessionTimeout:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.enableAutoActivityTracking"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerBoolValue *input = [GALTrackerBoolValue fromMap:message];
        FlutterError *error;
        [api enableAutoActivityTracking:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.send"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALHitBuilderMessage *input = [GALHitBuilderMessage fromMap:message];
        FlutterError *error;
        [api send:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.get"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        GALTrackerGetValue *output = [api get:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.set"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerSetValue *input = [GALTrackerSetValue fromMap:message];
        FlutterError *error;
        [api set:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setSampleRate"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerDoubleValue *input = [GALTrackerDoubleValue fromMap:message];
        FlutterError *error;
        [api setSampleRate:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setUseSecure"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerBoolValue *input = [GALTrackerBoolValue fromMap:message];
        FlutterError *error;
        [api setUseSecure:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setScreenName"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setScreenName:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setLocation"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setLocation:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setReferrer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setReferrer:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setPage"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setPage:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setHostname"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setHostname:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setTitle"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setTitle:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setLanguage"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setLanguage:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setEncoding"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setEncoding:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setScreenColors"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setScreenColors:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setScreenResolution"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerSetScreenResolutionValue *input = [GALTrackerSetScreenResolutionValue fromMap:message];
        FlutterError *error;
        [api setScreenResolution:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setViewportSize"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setViewportSize:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.getClientId"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerIdValue *input = [GALTrackerIdValue fromMap:message];
        FlutterError *error;
        GALTrackerGetClientIdValue *output = [api getClientId:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setClientId"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setClientId:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setAppName"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setAppName:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setAppId"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setAppId:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setAppInstallerId"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setAppInstallerId:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setAppVersion"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerStringValue *input = [GALTrackerStringValue fromMap:message];
        FlutterError *error;
        [api setAppVersion:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.setAnonymizeIp"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerBoolValue *input = [GALTrackerBoolValue fromMap:message];
        FlutterError *error;
        [api setAnonymizeIp:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.TrackerApi.enableAdvertisingIdCollection"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackerBoolValue *input = [GALTrackerBoolValue fromMap:message];
        FlutterError *error;
        [api enableAdvertisingIdCollection:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void GALGoogleAnalyticsApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<GALGoogleAnalyticsApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.getInstance"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api getInstance:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.setDryRun"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALGABool *input = [GALGABool fromMap:message];
        FlutterError *error;
        [api setDryRun:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.isDryRunEnabled"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        GALGABool *output = [api isDryRunEnabled:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.setAppOptOut"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALGABool *input = [GALGABool fromMap:message];
        FlutterError *error;
        [api setAppOptOut:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.getAppOptOut"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        GALGABool *output = [api getAppOptOut:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.setLocalDispatchPeriod"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALGAInt *input = [GALGAInt fromMap:message];
        FlutterError *error;
        [api setLocalDispatchPeriod:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.GoogleAnalyticsApi.newTracker"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GALTrackingId *input = [GALTrackingId fromMap:message];
        FlutterError *error;
        GALTrackerId *output = [api newTracker:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
