// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class TrackerBoolValue {
  int? trackerId;
  bool? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerBoolValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerBoolValue()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..value = pigeonMap['value'] as bool?;
  }
}

class TrackerIntValue {
  int? trackerId;
  int? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerIntValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerIntValue()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..value = pigeonMap['value'] as int?;
  }
}

class HitBuilderMessage {
  int? trackerId;
  String? data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static HitBuilderMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HitBuilderMessage()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..data = pigeonMap['data'] as String?;
  }
}

class TrackerGetValue {
  String? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerGetValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerGetValue()..value = pigeonMap['value'] as String?;
  }
}

class TrackerStringValue {
  int? trackerId;
  String? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerStringValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerStringValue()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..value = pigeonMap['value'] as String?;
  }
}

class TrackerSetValue {
  int? trackerId;
  String? key;
  String? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['key'] = key;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerSetValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerSetValue()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..key = pigeonMap['key'] as String?
      ..value = pigeonMap['value'] as String?;
  }
}

class TrackerDoubleValue {
  int? trackerId;
  double? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerDoubleValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerDoubleValue()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..value = pigeonMap['value'] as double?;
  }
}

class TrackerSetScreenResolutionValue {
  int? trackerId;
  int? value1;
  int? value2;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    pigeonMap['value1'] = value1;
    pigeonMap['value2'] = value2;
    return pigeonMap;
  }

  static TrackerSetScreenResolutionValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerSetScreenResolutionValue()
      ..trackerId = pigeonMap['trackerId'] as int?
      ..value1 = pigeonMap['value1'] as int?
      ..value2 = pigeonMap['value2'] as int?;
  }
}

class TrackerGetClientIdValue {
  String? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static TrackerGetClientIdValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerGetClientIdValue()..value = pigeonMap['value'] as String?;
  }
}

class TrackerIdValue {
  int? trackerId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    return pigeonMap;
  }

  static TrackerIdValue decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerIdValue()..trackerId = pigeonMap['trackerId'] as int?;
  }
}

class GABool {
  bool? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static GABool decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GABool()..value = pigeonMap['value'] as bool?;
  }
}

class GAInt {
  int? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static GAInt decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GAInt()..value = pigeonMap['value'] as int?;
  }
}

class TrackerId {
  int? trackerId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackerId'] = trackerId;
    return pigeonMap;
  }

  static TrackerId decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackerId()..trackerId = pigeonMap['trackerId'] as int?;
  }
}

class TrackingId {
  String? trackingId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackingId'] = trackingId;
    return pigeonMap;
  }

  static TrackingId decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TrackingId()..trackingId = pigeonMap['trackingId'] as String?;
  }
}

class TrackerApi {
  Future<void> enableExceptionReporting(TrackerBoolValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.enableExceptionReporting', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setSessionTimeout(TrackerIntValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setSessionTimeout', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> enableAutoActivityTracking(TrackerBoolValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.TrackerApi.enableAutoActivityTracking', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> send(HitBuilderMessage arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.send', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<TrackerGetValue> get(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.get', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackerGetValue.decode(replyMap['result']!);
    }
  }

  Future<void> set(TrackerSetValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.set', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setSampleRate(TrackerDoubleValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setSampleRate', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setUseSecure(TrackerBoolValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setUseSecure', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setScreenName(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setScreenName', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setLocation(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setLocation', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setReferrer(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setReferrer', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setPage(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setPage', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setHostname(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setHostname', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setTitle(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setTitle', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setLanguage(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setLanguage', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setEncoding(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setEncoding', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setScreenColors(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setScreenColors', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setScreenResolution(TrackerSetScreenResolutionValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setScreenResolution', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setViewportSize(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setViewportSize', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<TrackerGetClientIdValue> getClientId(TrackerIdValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.getClientId', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackerGetClientIdValue.decode(replyMap['result']!);
    }
  }

  Future<void> setClientId(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setClientId', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setAppName(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setAppName', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setAppId(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setAppId', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setAppInstallerId(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setAppInstallerId', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setAppVersion(TrackerStringValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setAppVersion', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setAnonymizeIp(TrackerBoolValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.TrackerApi.setAnonymizeIp', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> enableAdvertisingIdCollection(TrackerBoolValue arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.TrackerApi.enableAdvertisingIdCollection', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }
}

class GoogleAnalyticsApi {
  Future<void> getInstance() async {
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.GoogleAnalyticsApi.getInstance', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<void> setDryRun(GABool arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.GoogleAnalyticsApi.setDryRun', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<GABool> isDryRunEnabled() async {
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.GoogleAnalyticsApi.isDryRunEnabled', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return GABool.decode(replyMap['result']!);
    }
  }

  Future<void> setAppOptOut(GABool arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.GoogleAnalyticsApi.setAppOptOut', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<GABool> getAppOptOut() async {
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.GoogleAnalyticsApi.getAppOptOut', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return GABool.decode(replyMap['result']!);
    }
  }

  Future<void> setLocalDispatchPeriod(GAInt arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.GoogleAnalyticsApi.setLocalDispatchPeriod', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      // noop
    }
  }

  Future<TrackerId> newTracker(TrackingId arg) async {
    final Object encoded = arg.encode();
    const BasicMessageChannel<Object?> channel =
        BasicMessageChannel<Object?>('dev.flutter.pigeon.GoogleAnalyticsApi.newTracker', StandardMessageCodec());
    final Map<Object?, Object?>? replyMap = await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return TrackerId.decode(replyMap['result']!);
    }
  }
}
